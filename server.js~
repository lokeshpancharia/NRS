// Dependencies
// -----------------------------------------------------
//var express         = require('express');
//var mongoose        = require('mongoose');
//var port            = process.env.PORT || 3000;
//var database        = require('./app/config');
//var morgan          = require('morgan');
//var bodyParser      = require('body-parser');
//var methodOverride  = require('method-override');
//var app             = express();

// Express Configuration
// -----------------------------------------------------
// Sets the connection to MongoDB
//mongoose.connect(database.localtest.url);

// Logging and Parsing
//app.use(express.static(__dirname + '/public'));                 // sets the static files location to public
//app.use('/bower_components',  express.static(__dirname + '/bower_components')); // Use BowerComponents
//app.use(morgan('dev'));                                         // log with Morgan
//app.use(bodyParser.json());                                     // parse application/json
//app.use(bodyParser.urlencoded({extended: true}));               // parse application/x-www-form-urlencoded
//app.use(bodyParser.text());                                     // allows bodyParser to look at raw text
//app.use(bodyParser.json({ type: 'application/vnd.api+json'}));  // parse application/vnd.api+json as json
//app.use(methodOverride());

// Routes
// ------------------------------------------------------
//require('./app/routes.js')(app);

// Listen
// -------------------------------------------------------
//app.listen(port);
//console.log('App listening on port ' + port);

var http  = require('http')
  , fs    = require('fs')
  , path  = require('path')
  , mime  = require('mime')
  , cache = {};

function send404(response) {
  response.writeHead(404, {'Content-Type': 'text/plain'});
  response.write('Error 404: resource not found.');
  response.end();
}

function sendFile(response, filePath, fileContents) {
  response.writeHead(
    200,
    {"content-type": mime.lookup(path.basename(filePath))}
  );
  response.end(fileContents);
}

function serveStatic(response, cache, absPath) {
  if (cache[absPath]) {
    sendFile(response, absPath, cache[absPath]);
  } else {
    fs.exists(absPath, function(exists) {
      if (exists) {
        fs.readFile(absPath, function(err, data) {
          if (err) {
            send404(response);
          } else {
            cache[absPath] = data;
            sendFile(response, absPath, data);
          }
        });
      } else {
        send404(response);
      }
    });
  }
}

var server = http.createServer(function(request, response) {
  var filePath = false;
  if (request.url == '/') {
    filePath = 'public/index.html';
  } else {
    filePath = 'public' + request.url;
  }
  var absPath = './' + filePath;
  serveStatic(response, cache, absPath);
});

server.listen(3000, function() {
  console.log("Server listening on port 3000.");
});
